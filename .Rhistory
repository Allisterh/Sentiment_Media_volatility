require(rstan)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
require(rstan)
install.packages("tranlateR")
install.packages("RSelenium")
install.packages("rvest")
install.packages("tidyverse")
install.packages("RSelenium")
install.packages("rvest")
require(RSelenium)
require(rvest)
require(tidyverse)
rD <- rsDriver(browser="firefox", port=4545L, verbose=F)
remDr <- rD[["client"]]
remDr$navigate("https://www.fcc.gov/media/engineering/dtvmaps")
zip <- "30308"
remDr$findElement(using = "id", value = "startpoint")$sendKeysToElement(list(zip))
remDr$findElements("id", "btnSub")[[1]]$clickElement()
remDr$findElements("id", "btnSub")[[1]]$clickElement()
remDr$findElements("id", "btnSub")[[1]]$clickElement()
require(tm)
require(slam)
require(stringr)
### Import and clean data
twitter_df <- read.csv("/Users/julianashwin/Documents/DPhil/Raw_Data/Kaggle/gop_twitter/Sentiment.csv",
stringsAsFactors = FALSE)
View(twitter_df)
text_corpus <- Corpus(VectorSource(unlist(twitter_df$text)))
text_corpus <- tm_map(text_corpus, stripWhitespace)
text_corpus <- tm_map(text_corpus, removeNumbers)
text_corpus <- tm_map(text_corpus, removePunctuation)
text_corpus <- tm_map(text_corpus, content_transformer(tolower))
text_corpus <- tm_map(text_corpus, removeWords, stopwords("english"))
text_corpus <- tm_map(text_corpus, stemDocument)
text_corpus <- tm_map(text_corpus, stripWhitespace)
twitter_df$text_clean <- sapply(text_corpus, as.character)
twitter_df$text_clean <- gsub(" *\\b[[:alpha:]]{1,2}\\b *", " ", twitter_df$text_clean)
twitter_df$text_clean <- str_squish(twitter_df$text_clean)
twitter_df <- booking_subsample[which(twitter_df$text_clean !=""), ]
twitter_df <- twitter_df[which(twitter_df$text_clean !=""), ]
View(twitter_df)
colnames(twitter_df)
require(ggplot2)
ggplot(twitter_df) + geom_density(aes(x = retweet_counts))
ggplot(twitter_df) + geom_density(aes(x = retweet_count))
ggplot(twitter_df) + geom_density(aes(x = retweet_count))
summary(twitter_df$retweet_count)
summary(lm(retweet_count + senitment, data = twitter_df))
summary(lm(retweet_count + senitment, data = twitter_df))
twitter_df$retweet_count
summary(lm(retweet_count ~ sentiment, data = twitter_df))
table(twitter_df$candidate)
twitter_df$Trump <- as.numeric(twitter_df$candidate == "Donald Trump")
table(twitter_df$Trump)
summary(lm(retweet_count ~ Trump, data = twitter_df))
table(twitter_df$user_timezone)
US_timezones <- c("Central Time (US & Canada)", "Eastern Time (US & Canada)",
"Pacific Time (US & Canada)")
twitter_df$US_timezone <- as.numeric(twitter_df$user_timezone %in% US_timezones)
table(twitter_df$US_timezone)
summary(lm(retweet_count ~ US_timezone, data = twitter_df))
twitter_short <- twitter_df[which(twitter_df$retweet_count < 100),]
summary(lm(retweet_count ~ US_timezone, data = twitter_df))
summary(lm(retweet_count ~ US_timezone, data = twitter_short))
twitter_short <- twitter_df[which(twitter_df$retweet_count < 10),]
summary(lm(retweet_count ~ US_timezone, data = twitter_short))
twitter_short <- twitter_df[which(twitter_df$retweet_count < 100),]
summary(lm(retweet_count ~ US_timezone, data = twitter_df))
summary(lm(retweet_count ~ US_timezone, data = twitter_short))
table(is.na(twitter_df$user_timezone))
table(twitter_df$user_timezone=="")
table(twitter_df$tweet_location =="")
names_df <-  read.csv("/Users/julianashwin/Documents/DPhil/Raw_Data/Kaggle/baby-names.csv",
stringsAsFactors = FALSE)
View(names_df)
table(names_df$sex)
names_df <- names_df[which(names_df$sex=="girl"),]
View(names_df)
length(unique(twitter_df$name))
topnames <- names_df$name[1:200]
require(tm)
require(slam)
require(stringr)
### Import and clean data
booking_df <- read.csv("/Users/julianashwin/Documents/DPhil/Raw_Data/Booking/Hotel_Reviews.csv",
stringsAsFactors = FALSE)
colnames(booking_df)
boking_df.tags[1:10]
booking_df.tags[1:10]
booking_df.Tags[1:10]
booking_df$Tags[1:10]
booking_df$Couple <- as.numeric(str_detect(booking_df$Tags, "Couple"))
table(booking_df$Couple)
View(booking_df[,c("Tags", "Couple")])
booking_df$Leisure <- as.numeric(str_detect(booking_df$Tags, "Leisure"))
View(booking_df[,c("Tags", "Leisure")])
table(booking_df$Leisure)
booking_uksample <-booking_df[which(booking_df$Reviewer_Nationality == " United Kingdom "),]
booking_ussample <-booking_df[which(booking_df$Reviewer_Nationality == " United States of America "),]
booking1 <- booking_df[which(booking_df$Leisure == 0),]
booking2 <- booking_df[which(booking_df$Leisure == 1),]
booking2[sample(1:nrow(booking2), nrow(booking1)),]
booking2 <- booking2[sample(1:nrow(booking2), nrow(booking1)),]
booking_df <- rbind(booking1, booking2)
booking_uksample <-booking_df[which(booking_df$Reviewer_Nationality == " United Kingdom "),]
booking1 <- booking_df[which(booking_df$Couple == 0),]
booking2 <- booking_df[which(booking_df$Couple == 1),]
booking1 <- booking_df[which(booking_df$Couple == 1),]
booking2 <- booking_df[which(booking_df$Couple == 9),]
booking1 <- booking_df[which(booking_df$Couple == 1),]
booking2 <- booking_df[which(booking_df$Couple == 0),]
74490+121406
booking2 <- booking2[sample(1:nrow(booking2), nrow(booking1)),]
booking_df <- rbind(booking1, booking2)
booking_uksample <-booking_df[which(booking_df$Reviewer_Nationality == " United Kingdom "),]
booking_ussample <-booking_df[which(booking_df$Reviewer_Nationality == " United States of America "),]
booking_df <- booking_df[sample(1:nrow(booking_df)),]
require(tm)
require(slam)
require(stringr)
### Import and clean data
booking_df <- read.csv("/Users/julianashwin/Documents/DPhil/Raw_Data/Booking/Hotel_Reviews.csv",
stringsAsFactors = FALSE)
booking_df$Couple <- as.numeric(str_detect(booking_df$Tags, "Couple"))
booking_df$Leisure <- as.numeric(str_detect(booking_df$Tags, "Leisure"))
# Sample so that there Leisure and Couple are roughly equally represented
booking1 <- booking_df[which(booking_df$Leisure == 0),]
booking2 <- booking_df[which(booking_df$Leisure == 1),]
booking2 <- booking2[sample(1:nrow(booking2), nrow(booking1)),]
booking_df <- rbind(booking1, booking2)
booking1 <- booking_df[which(booking_df$Couple == 1),]
booking2 <- booking_df[which(booking_df$Couple == 0),]
booking2 <- booking2[sample(1:nrow(booking2), nrow(booking1)),]
booking_df <- rbind(booking1, booking2)
# Shuffle
booking_df <- booking_df[sample(1:nrow(booking_df)),]
# Combine Pos and Neg reviews
booking_df$Positive_Review[which(booking_df$Positive_Review == "No Positive")] <- " "
booking_df$Negative_Review[which(booking_df$Negative_Review == "No Negative")] <- " "
booking_df$text <- paste(booking_df$Positive_Review, booking_df$Negative_Review,
sep = ". ")
# Clean text
text_corpus <- Corpus(VectorSource(unlist(booking_df$text)))
text_corpus <- tm_map(text_corpus, stripWhitespace)
text_corpus <- tm_map(text_corpus, removeNumbers)
text_corpus <- tm_map(text_corpus, removePunctuation)
text_corpus <- tm_map(text_corpus, content_transformer(tolower))
text_corpus <- tm_map(text_corpus, removeWords, stopwords("english"))
text_corpus <- tm_map(text_corpus, stemDocument)
text_corpus <- tm_map(text_corpus, stripWhitespace)
booking_df$text_clean <- sapply(text_corpus, as.character)
booking_df$text_clean <- gsub(" *\\b[[:alpha:]]{1,2}\\b *", " ", booking_df$text_clean)
booking_df$text_clean <- str_squish(booking_df$text_clean)
booking_df <- booking_df[which(booking_df$text_clean !=""), ]
# Keep only 50,000 observations
booking_subsample <- booking_df[sample(1:nrow(booking_df), 50000),]
naive_lm <- lm(Reviewer_Score ~ Couple,
data = booking_subsample)
summary(naive_lm)
av_lm <- lm(Reviewer_Score ~ Couple + Leisure,
data = booking_subsample)
summary(av_lm)
cor.test(booking_subsample$Couple, booking_subsample$Leisure)
table(booking_subsample[,c("Couple", "Leisure")])
full_lm <- lm(Reviewer_Score ~ Couple + Leisure + Average_Score,
data = booking_subsample)
summary(full_lm)
cov_lm <- lm(Couple ~ Average_Score + Leisure,
data = booking_subsample)
summary(cov_lm)
full_lm <- lm(Reviewer_Score ~ Couple + Leisure + Average_Score,
data = booking_subsample)
summary(full_lm)
naive_lm <- lm(Reviewer_Score ~ Leisure,
data = booking_subsample)
summary(naive_lm)
full_lm <- lm(Reviewer_Score ~ Couple + Leisure + Average_Score,
data = booking_subsample)
summary(full_lm)
booking_df$Leisure <- as.numeric(str_detect(booking_df$Tags, "Leisure"))
booking_df$Business <- as.numeric(str_detect(booking_df$Tags, "Business trip"))
table(booking_df$Business)
table(booking_df$Leisure)
cor.test(booking_subsample$Business, booking_subsample$Leisure)
cor.test(booking_df$Business, booking_df$Leisure)
require(tm)
require(slam)
require(stringr)
### Import and clean data
booking_df <- read.csv("/Users/julianashwin/Documents/DPhil/Raw_Data/Booking/Hotel_Reviews.csv",
stringsAsFactors = FALSE)
# Dummies for lesiure vs business and couples
booking_df$Business <- as.numeric(str_detect(booking_df$Tags, "Business trip"))
booking_df$Couple <- as.numeric(str_detect(booking_df$Tags, "Couple"))
booking_df <- booking_df[which(booking_df$Business==1 | booking_df$Leisure==1),]
booking_df$Business <- as.numeric(str_detect(booking_df$Tags, "Business trip"))
booking_df$Leisure <- as.numeric(str_detect(booking_df$Tags, "Leisure trip"))
booking_df <- read.csv("/Users/julianashwin/Documents/DPhil/Raw_Data/Booking/Hotel_Reviews.csv",
stringsAsFactors = FALSE)
# Dummies for lesiure vs business and couples
booking_df$Business <- as.numeric(str_detect(booking_df$Tags, "Business trip"))
booking_df$Leisure <- as.numeric(str_detect(booking_df$Tags, "Leisure trip"))
booking_df <- booking_df[which(booking_df$Business==1 | booking_df$Leisure==1),]
table(booking_df$Business + booking_df$Leisure)
booking_df$Couple <- as.numeric(str_detect(booking_df$Tags, "Couple"))
booking1 <- booking_df[which(booking_df$Leisure == 0),]
booking2 <- booking_df[which(booking_df$Leisure == 1),]
booking2 <- booking2[sample(1:nrow(booking2), nrow(booking1)),]
booking_df <- rbind(booking1, booking2)
booking1 <- booking_df[which(booking_df$Couple == 1),]
booking2 <- booking_df[which(booking_df$Couple == 0),]
booking2 <- booking2[sample(1:nrow(booking2), nrow(booking1)),]
booking_df <- rbind(booking1, booking2)
booking_df <- booking_df[sample(1:nrow(booking_df)),]
booking_df$Positive_Review[which(booking_df$Positive_Review == "No Positive")] <- " "
booking_df$Negative_Review[which(booking_df$Negative_Review == "No Negative")] <- " "
booking_df$text <- paste(booking_df$Positive_Review, booking_df$Negative_Review,
sep = ". ")
text_corpus <- Corpus(VectorSource(unlist(booking_df$text)))
text_corpus <- tm_map(text_corpus, stripWhitespace)
text_corpus <- tm_map(text_corpus, removeNumbers)
text_corpus <- tm_map(text_corpus, removePunctuation)
text_corpus <- tm_map(text_corpus, content_transformer(tolower))
text_corpus <- tm_map(text_corpus, removeWords, stopwords("english"))
text_corpus <- tm_map(text_corpus, stemDocument)
text_corpus <- tm_map(text_corpus, stripWhitespace)
booking_df$text_clean <- sapply(text_corpus, as.character)
booking_df$text_clean <- gsub(" *\\b[[:alpha:]]{1,2}\\b *", " ", booking_df$text_clean)
booking_df$text_clean <- str_squish(booking_df$text_clean)
booking_df <- booking_df[which(booking_df$text_clean !=""), ]
booking_subsample <- booking_df[sample(1:nrow(booking_df), 50000),]
naive_lm <- lm(Reviewer_Score ~ Leisure,
data = booking_subsample)
summary(naive_lm)
full_lm <- lm(Reviewer_Score ~ Couple + Leisure + Average_Score,
data = booking_subsample)
summary(full_lm)
cov_lm <- lm(Couple ~ Average_Score + Leisure,
data = booking_subsample)
summary(cov_lm)
naive_lm <- lm(Reviewer_Score ~ Leisure,
data = booking_subsample)
summary(naive_lm)
full_lm <- lm(Reviewer_Score ~ Couple + Leisure + Average_Score,
data = booking_subsample)
summary(full_lm)
cov_lm <- lm(Couple ~ Average_Score + Leisure,
data = booking_subsample)
summary(cov_lm)
colnames(booking_subsample)
booking_subsample <- booking_subsample[,c("Average_Score", "Reviewer_Nationality", "Review_Total_Negative_Word_Counts",
"Total_Number_of_Reviews","Review_Total_Positive_Word_Counts",
"Total_Number_of_Reviews_Reviewer_Has_Given", "Reviewer_Score",
"Leisure", "Couple", "text", "text_clean")]
write.csv(booking_subsample,"/Users/julianashwin/Documents/GitHub/BTR.jl/data/booking_ukus_sample.csv",
row.names = FALSE)
write.csv(booking_subsample,"/Users/julianashwin/Documents/GitHub/BTR.jl/data/booking_semisynth_sample.csv",
row.names = FALSE)
naive_lm <- lm(Reviewer_Score ~ Leisure,
data = booking_subsample)
summary(naive_lm)
full_lm <- lm(Reviewer_Score ~ Couple + Leisure + Average_Score,
data = booking_subsample)
summary(full_lm)
cov_lm <- lm(Couple ~ Average_Score + Leisure,
data = booking_subsample)
summary(cov_lm)
naive_lm <- lm(Reviewer_Score ~ Leisure,
data = booking_subsample)
summary(naive_lm)
full_lm <- lm(Reviewer_Score ~ Couple + Leisure + Average_Score,
data = booking_subsample)
summary(full_lm)
cov_lm <- lm(Leisure ~ Average_Score + Couple,
data = booking_subsample)
summary(cov_lm)
cov_lm <- lm(Couple ~ Average_Score + Leisure,
data = booking_subsample)
summary(cov_lm)
booking_df$Tags[1:10]
setwd("~/Documents/GitHub/Media_volatility")
rm(list=ls())
require(plm)
require(stringr)
require(stargazer)
require(ggplot2)
require(reshape2)
require(urca)
require(lfe)
# Import the panel data
import_filename = paste(clean_dir, "FT/matched/clean_equities_articles.csv", sep = "/")
clean_data <- read.csv(import_filename, stringsAsFactors = FALSE)
clean_data <- pdata.frame(clean_data, index = c("Code", "Date"))
clean_data$abs_intra_day
setwd("~/Documents/GitHub/Media_volatility")
rm(list=ls())
require(plm)
require(stringr)
require(stargazer)
require(ggplot2)
require(reshape2)
require(urca)
require(lfe)
clean_dir <- "/Users/julianashwin/Documents/DPhil/Clean_Data/"
import_filename = paste(clean_dir, "FT/matched/clean_equities_articles.csv", sep = "/")
clean_data <- read.csv(import_filename, stringsAsFactors = FALSE)
clean_data <- pdata.frame(clean_data, index = c("Code", "Date"))
clean_data$intra_day <- 100*((clean_data$Close - clean_data$Open)/clean_data$Open)
clean_data$return <- 100*((clean_data$Close - plm::lag(clean_data$Open))/plm::lag(clean_data$Open))
clean_data$abs_return <- abs(clean_data$return)
clean_data$abs_intra_day <- abs(clean_data$intra_day)
table(clean_data$abs_return, clean_data$abs_intra_day)
table(clean_data[,c("abs_return", "abs_intra_day")])
table(clean_data$abs_return == clean_data$abs_intra_day)
(clean_data$abs_return == clean_data$abs_intra_day)[1:10]
clean_data[1:10,c("abs_return", "abs_intra_day")]
View(clean_data)
clean_data$return <- 100*((clean_data$Close - plm::lag(clean_data$Close))/plm::lag(clean_data$Close))
clean_data$abs_return <- abs(clean_data$return)
clean_data$abs_intra_day <- abs(clean_data$intra_day)
clean_data$highlow_1lag <- plm::lag(clean_data$highlow,1)
clean_data$highlow_2lag <- plm::lag(clean_data$highlow,2)
clean_data$highlow_3lag <- plm::lag(clean_data$highlow,3)
clean_data$highlow_4lag <- plm::lag(clean_data$highlow,4)
clean_data$highlow_5lag <- plm::lag(clean_data$highlow,5)
model1 = lm(highlow ~ mention, data = clean_data)
summary(model1)
model2 <- felm(formula = highlow ~ mention | Code, data = clean_data)
summary(model2)
model3 <- felm(formula = highlow ~ mention | Code + Date, data = clean_data)
summary(model3)
model4 <- felm(formula = highlow ~ mention +  plm::lag(highlow, 1:5) | Code + Date, data = clean_data)
summary(model4)
model5 <- felm(formula = highlow ~ mention + plm::lag(highlow, 1:5) + abs_intra_day | Code + Date, data = clean_data)
summary(model5)
model6 <- felm(formula = highlow ~ mention + plm::lag(highlow, 1:5) + abs_intra_day +
VI_put + VI_call| Code + Date, data = clean_data)
summary(model6)
model7 <- felm(formula = highlow ~ mention + plm::lag(highlow, 1:5) + abs_intra_day +
VI_put + VI_call + IndexHighLow | Code , data = clean_data)
summary(model7)
model8 <- felm(formula = highlow ~ mention + highlow_1lag + highlow_2lag + highlow_3lag +
highlow_4lag + highlow_5lag + abs_intra_day +
VI_put + VI_call + IndexHighLow | Code , data = clean_data)
summary(model8)
clean_data$main_text[1]
which(!is.na(clean_data$main_text))[1]
clean_data$main_text[250]
clean_data$headline[250]
clean_data$text <- paste(paste(clean_data$headline, clean_data$main_text, sep = ". "))
clean_data$text[250]
text_corpus <- Corpus(VectorSource(unlist(clean_data$text)))
text_corpus <- tm_map(text_corpus, stripWhitespace)
text_corpus <- tm_map(text_corpus, removeNumbers)
text_corpus <- tm_map(text_corpus, removePunctuation)
text_corpus <- tm_map(text_corpus, content_transformer(tolower))
text_corpus <- tm_map(text_corpus, removeWords, stopwords("english"))
text_corpus <- tm_map(text_corpus, stemDocument)
text_corpus <- tm_map(text_corpus, stripWhitespace)
booking_df$text_clean <- sapply(text_corpus, as.character)
clean_data$text_clean <- sapply(text_corpus, as.character)
clean_data$text_clean <- gsub(" *\\b[[:alpha:]]{1,2}\\b *", " ", clean_data$text_clean)
clean_data$text_clean <- str_squish(clean_data$text_clean)
clean_data$text_clean[250]
colnames(clean_data)
12 3
12, 3
12,3
[12,3]
clean_data[12,3]
clean_data <- clean_data[,c("Date", "Code", "Close", "Open", "Low", "High", "Volume",
"Turnover", "VI_put", "VI_call", "abs_intra_day",
"return", "abs_return", "highlow", "highlow_1lag",
"highlow_2lag", "highlow_3lag", "highlow_4lag", "highlow_5lag",
"Index_Price", "Index_Change", "Index_High", "Index_Low",
"Index_Open", "Index_abs_Change", "IndexHighLow",
"weekday", "Monday", "Tuesday", "Wednesday", "Thursday",
"mention", "head_mention", "ner_mention", "text", "text_clean")]
write.csv(clean_data,paste0(clean_dir, "FT/matched/BTR_FT_data.csv"), row.names = FALSE)
